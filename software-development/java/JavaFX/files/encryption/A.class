package com.thomaswilde.encryption;

import java.util.Base64.Encoder;
import java.util.Base64.Decoder;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
//import javax.xml.bind.DatatypeConverter;

import jakarta.xml.bind.DatatypeConverter;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Base64;
import java.util.UUID;

public class A {

    private static final String de = "UTF-8";
    private static SecretKeySpec x;
    private static byte[] k;
    private static Encoder e = Base64.getEncoder();
    private static Decoder d = Base64.getDecoder();


    public static void k(String m)
    {
        MessageDigest s = null;
        try {
            k = m.getBytes(de);
            s = MessageDigest.getInstance(n("U0hBLTE="));
            k = s.digest(k);
            k = Arrays.copyOf(k, 16);
            x = new SecretKeySpec(k, n("QUVT"));
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String z(String g, String p)
    {
        try
        {
            k(p);
            Cipher cipher = Cipher.getInstance(n("QUVTL0VDQi9QS0NTNVBhZGRpbmc="));
            cipher.init(1, x);
            return Base64.getEncoder().encodeToString(cipher.doFinal(g.getBytes(n("VVRGLTg="))));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return null;
    }

    public static String u(String x, String m)
    {
        try
        {
            k(m);
            Cipher cipher = Cipher.getInstance(n("QUVTL0VDQi9QS0NTNVBhZGRpbmc="));
            cipher.init(2, A.x);
            return new String(cipher.doFinal(Base64.getDecoder().decode(x)));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return null;
    }

    public static String t(String s){
        try
        {
            k(n("YQ=="));
            Cipher cipher = Cipher.getInstance(n("QUVTL0VDQi9QS0NTNVBhZGRpbmc="));
            cipher.init(2, A.x);
            return new String(cipher.doFinal(Base64.getDecoder().decode(s)));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return null;
    }

    public static String m(String b) {
        try {
//            return e.encode(b.getBytes(de));
            return DatatypeConverter.printBase64Binary(b.getBytes(de));
        } catch (UnsupportedEncodingException e) {
            return "";
        }
    }

    public static String n(String a) {
//        try {
//            return new String(d.decodeBuffer(a), de);
//        } catch (IOException e) {
//            return "";
//        }
        return new String(DatatypeConverter.parseBase64Binary(a));
    }

}
