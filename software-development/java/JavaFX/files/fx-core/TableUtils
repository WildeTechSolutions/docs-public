package com.thomaswilde.fxcore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.KeyEvent;

public class TableUtils {

    private static final Logger log = LoggerFactory.getLogger(TableUtils.class);

    /**
     * Install the keyboard handler:
     *   + CTRL + C = copy to clipboard
     * @param table
     */
    public static void installCopyPasteHandler(TableView<?> table, int numBlankColumnsAfterCharge) {

        // install copy/paste keyboard handler
        table.setOnKeyPressed(new TableKeyEventHandler(numBlankColumnsAfterCharge));

    }

    /**
     * Copy/Paste keyboard event handler.
     * The handler uses the keyEvent's source for the clipboard data. The source must be of type TableView.
     */
    public static class TableKeyEventHandler implements EventHandler<KeyEvent> {

        KeyCodeCombination copyKeyCodeCompination = new KeyCodeCombination(KeyCode.C, KeyCombination.CONTROL_ANY);
        private int numBlankColumnsAfterCharge;
        public TableKeyEventHandler(int numBlankColumnsAfterCharge){
            this.numBlankColumnsAfterCharge = numBlankColumnsAfterCharge;
        }

        public void handle(final KeyEvent keyEvent) {

            if (copyKeyCodeCompination.match(keyEvent)) {

                if( keyEvent.getSource() instanceof TableView) {

                    // copy to clipboard
                    copySelectionToClipboard( (TableView<?>) keyEvent.getSource(), numBlankColumnsAfterCharge);

                    log.debug("Selection copied to clipboard");

                    // event is handled, consume it
                    keyEvent.consume();

                }

            }

        }

    }

    /**
     * Get table selection and copy it to the clipboard.
     * @param table
     */
    public static void copySelectedRow(TableView<?> table){

    }

    public static void copySelectionToClipboard(TableView<?> table, int numBlankColumnsAfterCharge) {

        StringBuilder clipboardString = new StringBuilder();

        ObservableList<TablePosition> positionList = table.getSelectionModel().getSelectedCells();


        int prevRow = -1;

        for (TablePosition position : positionList) {

            int row = position.getRow();
            int displayedCol = 0;
            for(int col=0; col<table.getColumns().size() + numBlankColumnsAfterCharge; col++){
//                System.out.println("row: " + row);
//                System.out.println("col: " + col);

                Object cell = null;
                if(col <= 1 || col > 1+numBlankColumnsAfterCharge){
                    cell = (Object) table.getColumns().get(displayedCol).getCellData(row);
                    displayedCol++;
                }

                if (cell == null) {
                    cell = "";
                }
                if (prevRow == row) {

                    clipboardString.append('\t');

                } else if (prevRow != -1) {

                    clipboardString.append('\n');

                }

                // create string from cell
                String text = cell.toString();

                // add new item to clipboard
                clipboardString.append(text);

                // remember previous
                prevRow = row;
            }
        }

        // create clipboard content
        final ClipboardContent clipboardContent = new ClipboardContent();
        clipboardContent.putString(clipboardString.toString());

        // set clipboard content
        Clipboard.getSystemClipboard().setContent(clipboardContent);


    }
}
