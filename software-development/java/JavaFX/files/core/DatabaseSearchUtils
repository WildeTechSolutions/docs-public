package com.thomaswilde.wildebeans.ui;

import com.thomaswilde.fxcore.DialogUtil;
import com.thomaswilde.fxcore.FXPropertyUtils;
import com.thomaswilde.icons.GlyphButton;
import com.thomaswilde.util.SqlItem;
import com.thomaswilde.wildebeans.WildeBeanTable;
import com.thomaswilde.wildebeans.annotations.ClassDescriptor;
import com.thomaswilde.wildebeans.annotations.DatabaseSearch;
import com.thomaswilde.wildebeans.annotations.UiListProperty;
import com.thomaswilde.wildebeans.annotations.UiProperty;
import com.thomaswilde.wildebeans.application.RepositoryUtil;
import com.thomaswilde.wildebeans.application.WildeDBApplication;
import com.thomaswilde.wildebeans.database.DbMethods;
import com.thomaswilde.wildebeans.ui.dbsearch.SavedDbSearch;
import com.thomaswilde.wildebeans.ui.dbsearch.SavedDbSearchMethods;
import com.thomaswilde.wildebeans.ui.dbsearch.SavedSqlItemMethods;
import com.thomaswilde.wildebeans.ui.dbsearch.SearchField;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.util.Strings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Consumer;

import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableRow;
import javafx.stage.Window;

public class DatabaseSearchUtils {

    private static final Logger log = LoggerFactory.getLogger(DatabaseSearchUtils.class);

    public static SavedDbSearchMethods promptForOpen(Window owningWindow) {

        // Get the saved db searches from the database
        Class<?> savedDbSearchClass = WildeDBApplication.getInstance().getEntityRepositoryMap().keySet()
                .stream()
                .filter(clazz -> clazz != null && SavedDbSearchMethods.class.isAssignableFrom(clazz))
                .findFirst().orElse(null);

        if (savedDbSearchClass == null) {
            log.error("No repository that implements SavedDbSearchMethods");
        }

        DbMethods<?, ?> repository = WildeDBApplication.getInstance().getRepository(savedDbSearchClass);

        try {
//            ObservableList<?> savedDbSearches = FXCollections.observableArrayList(repository.findAll());
            ObservableList<?> savedDbSearches = FXCollections.observableArrayList(repository.findByWildeQuery(
                    "visibleToOthers:%s OR user.id:%s",
                    true,
                    WildeDBApplication.getInstance().getUserInterface().getId()
            ));

            WildeBeanTable<?> table = new WildeBeanTable<>();

            table.populateTable(savedDbSearchClass, savedDbSearches, null);


            // Create an Alert with a Table of the user's saved searches
            Alert alert = DialogUtil.getInformationAlert();

            table.getTableView().setRowFactory(tableView -> {
                TableRow row = new TableRow<>();
                row.setOnMouseReleased(event -> {
                    if (event.getClickCount() == 2 &&
                            !row.isEmpty()) {
                        log.trace("Double click registered in saved searches");
                        alert.close();

                        try {
                            RepositoryUtil.fetchAllLists(row.getItem(), false);

                            // Need to convert the SavedDbSearch entity to a SavedDbSearch used here
                            SavedDbSearchMethods savedSqlItemMethods = (SavedDbSearchMethods) row.getItem();

                            SavedDbSearch savedDbSearch = new SavedDbSearch(savedSqlItemMethods);

//                            search(savedDbSearch);

                            alert.setResult(ButtonType.OK);
                            alert.close();
//                            callback.accept(savedSqlItemMethods);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                });

                MenuItem deleteMenuItem = new MenuItem("Remove", GlyphButton.getGlyphIconStyled(GlyphButton.TRASH));
                deleteMenuItem.setOnAction(event -> {
                    try {
                        RepositoryUtil.delete(row.getItem());
                        savedDbSearches.remove(row.getItem());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });

                ContextMenu contextMenu = new ContextMenu(deleteMenuItem);

                row.contextMenuProperty().bind(Bindings
                        .when(row.emptyProperty().not())
                        .then(contextMenu)
                        .otherwise((ContextMenu) null));

                return row;
            });

            alert.setHeaderText("Select a saved search");
            alert.getDialogPane().setContent(table);

            alert.getDialogPane().setMaxWidth(1000);
            alert.getDialogPane().setPrefWidth(800);
            alert.getDialogPane().setMinWidth(500);
            alert.setResizable(true);

            Button okButton = (Button) alert.getDialogPane().lookupButton(ButtonType.OK);
            okButton.addEventFilter(ActionEvent.ACTION, event -> {
                if (table.getTableView().getSelectionModel().getSelectedItem() != null) {

                    try {

                        SavedDbSearchMethods savedSqlItemMethods = (SavedDbSearchMethods) table.getTableView().getSelectionModel().getSelectedItem();

                        RepositoryUtil.fetchAllLists(savedSqlItemMethods, false);

                        SavedDbSearch savedDbSearch = new SavedDbSearch(savedSqlItemMethods);

                        log.debug("OK button pressed on saved search with {} items", savedDbSearch.getSqlItems());
                        alert.close();
//                        callback.accept(savedSqlItemMethods);



                    } catch (Exception e) {
                        log.error(ExceptionUtils.getStackTrace(e));
                    }
                }else{
                    event.consume();
                }
            });

            Optional<ButtonType> result = DialogUtil.showAlertAndWait(owningWindow, alert);

            if(result.isPresent() && result.get() == ButtonType.OK){
                return (SavedDbSearchMethods) table.getTableView().getSelectionModel().getSelectedItem();
            }

//            DialogUtil.showCenteredAlert(owningWindow, alert);


        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    public static List<SearchField> getSearchFields(Class<?> searchClass){
        List<SearchField> fields = new ArrayList<>();
        ClassDescriptor classDescriptor = searchClass.getAnnotation(ClassDescriptor.class);
        List<String> fieldsToOmit = Arrays.asList(classDescriptor.fieldsToOmitFromSearch());
        addSearchFields(fields, searchClass, fieldsToOmit,null, null, new HashSet<>());

        //TODO add specific fullNestedFile from ClassDescriptor, i.e. `programs.program`.
        if(classDescriptor.fieldsToIncludeInSearch().length > 0){
            for (String fullNestedField : classDescriptor.fieldsToIncludeInSearch()) {
                Field field = FXPropertyUtils.getField(searchClass, fullNestedField);

                if(field.isAnnotationPresent(UiProperty.class)){
                    String uiDisplayName = "";
                    if(field.isAnnotationPresent(DatabaseSearch.class)){
                        if(!field.getAnnotation(DatabaseSearch.class).searchable()){
                            continue;
                        }
                        if(!field.getAnnotation(DatabaseSearch.class).preferredDisplayName().isEmpty()){
                            uiDisplayName = field.getAnnotation(DatabaseSearch.class).preferredDisplayName();
                        }

                    }
                    if(uiDisplayName.isEmpty()){
                        uiDisplayName = field.getAnnotation(UiProperty.class).displayName();
                    }
//                    displayName = Strings.isNotBlank(displayNamePrefix) ? String.join(" -> ", displayNamePrefix, uiDisplayName) : uiDisplayName;
                    fields.add(new SearchField(fullNestedField, uiDisplayName));
                }
            }
        }

        fields.forEach(searchField -> searchField.setSearchClass(searchClass));

        return fields;
    }

    public static void addSearchFields(List<SearchField> searchFields, Class<?> searchClass, List<String> fieldsToOmit, String fullNestedField, String displayNamePrefix, Set<String> traversedPaths){


        for(Field field : searchClass.getDeclaredFields()){
            if((field.isAnnotationPresent(Column.class) || field.isAnnotationPresent(JoinColumn.class))){
                String fullFieldName = Strings.isNotBlank(fullNestedField) ? String.join(".", fullNestedField, field.getName()) : field.getName();



                if(fieldsToOmit.contains(fullFieldName)) continue;
                if(traversedPaths.contains(fullFieldName)) continue;

                // the technique with traversedPaths, doesn't actually help with recursive issue.  The issue arises from true @OneToOne relationships.
                // solution for now is just use fieldsToOmitFromSearch = "recertInfo.job"

                traversedPaths.add(fullFieldName);

                String displayName = null;
                if(field.isAnnotationPresent(UiProperty.class)){
                    String uiDisplayName = "";
                    if(field.isAnnotationPresent(DatabaseSearch.class)){
                        if(!field.getAnnotation(DatabaseSearch.class).searchable()){
                            continue;
                        }
                        if(!field.getAnnotation(DatabaseSearch.class).preferredDisplayName().isEmpty()){
                            uiDisplayName = field.getAnnotation(DatabaseSearch.class).preferredDisplayName();
                        }

                    }
                    if(uiDisplayName.isEmpty()){
                        uiDisplayName = field.getAnnotation(UiProperty.class).displayName();
                    }
                    displayName = Strings.isNotBlank(displayNamePrefix) ? String.join(" -> ", displayNamePrefix, uiDisplayName) : uiDisplayName;
                    searchFields.add(new SearchField(fullFieldName, displayName));
                }
                else if(field.isAnnotationPresent(DatabaseSearch.class)) {

                    String uiDisplayName = "";
                    if(!field.getAnnotation(DatabaseSearch.class).preferredDisplayName().isEmpty()){
                        uiDisplayName = field.getAnnotation(DatabaseSearch.class).preferredDisplayName();
                    }else if(field.isAnnotationPresent(UiListProperty.class)){
                        uiDisplayName = field.getAnnotation(UiListProperty.class).listName();
                    }

                    displayName = Strings.isNotBlank(displayNamePrefix) ? String.join(" -> ", displayNamePrefix, uiDisplayName) : uiDisplayName;
                    searchFields.add(new SearchField(fullFieldName, displayName));
                }

                if(field.isAnnotationPresent(ManyToOne.class)){
                    Class<?> fieldType = FXPropertyUtils.getFieldType(searchClass, field.getName());

                    // Check for nested fields even if we're not adding this one
                    if(displayName == null){
                        displayName = Strings.isNotBlank(displayNamePrefix) ? String.join(" -> ", displayNamePrefix, fieldType.getAnnotation(ClassDescriptor.class).displayName()) : fieldType.getAnnotation(ClassDescriptor.class).displayName();
                    }

                    // We don't want to add nested search fields if we're talking about a back reference to the top level search class
                    log.trace("Adding nested search fields for class {}, field {}, field type {}", searchClass, field.getName(), fieldType);
                    addSearchFields(searchFields, fieldType, fieldsToOmit, fullFieldName, displayName, traversedPaths);

                }

            }

        }
    }

    public static <T> List<T> search(Class<T> searchClass, SavedDbSearchMethods savedDbSearchMethods) throws Exception {

        // Check if sqlItems need to be loaded.
        if (savedDbSearchMethods.getSavedSqlItems().isEmpty()) {
            RepositoryUtil.fetchAllLists(savedDbSearchMethods, false);
        }

        ClassDescriptor classDescriptor = searchClass.getAnnotation(ClassDescriptor.class);

        SavedDbSearch savedDbSearch = new SavedDbSearch(savedDbSearchMethods);


        return WildeDBApplication.getInstance().getRepository(searchClass)
                .findBy(savedDbSearch.getSqlItems(), null, null, Arrays.asList(classDescriptor.fieldsToFetchForSearch()), 10000);
    }

    public static <T> List<T> search(SavedDbSearchMethods savedDbSearchMethods) throws Exception {

        Class<?> searchClass = WildeDBApplication.getInstance().getEntityRepositoryMap().keySet()
                .stream()
                .filter(entityClass -> entityClass != null &&
                        entityClass.getAnnotation(Table.class).name().equals(savedDbSearchMethods.getTableName())
                )
                .findFirst().orElse(null);

        return search((Class<T>) searchClass, savedDbSearchMethods);

    }

}
